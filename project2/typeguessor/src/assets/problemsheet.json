[
    {
        "ask": "Y",
        "difficulty": 2,
        "problem": "type Y<T> = T extends (infer U)[] ? U : T;\ntype Result = Y<string[]>;",
        "answer": "string"
    },
    {
        "ask": "Z",
        "difficulty": 3,
        "problem": "type Z<T> = T extends () => infer R ? R : never;\ntype Result = Z<() => boolean[]>;",
        "answer": "boolean[]"
    },
    {
        "ask": "A",
        "difficulty": 3,
        "problem": "type A<T> = T extends Promise<infer U> ? (U extends Array<infer V> ? V : U) : T;\ntype Result = A<Promise<string[]>>;",
        "answer": "string"
    },
    {
        "ask": "B",
        "difficulty": 4,
        "problem": "type B<T> = T extends () => Promise<infer R> ? R : never;\ntype Result = B<() => Promise<{ ok: true }>>;",
        "answer": "{ ok: true }"
    },
    {
        "ask": "C",
        "difficulty": 4,
        "problem": "type C<T> = T extends (infer U)[] ? C<U> : T;\ntype Result = C<number[][][]>;",
        "answer": "number"
    },
    {
        "ask": "D",
        "difficulty": 5,
        "problem": "type D<T> = T extends (...args: any[]) => infer R\n  ? R extends Promise<infer U>\n    ? U extends Array<infer V>\n      ? V\n      : U\n    : R\n  : T;\ntype Result = D<() => Promise<string[]>>;",
        "answer": "string"
    }
]
